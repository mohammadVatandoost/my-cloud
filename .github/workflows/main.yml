name: Main

on:
  push:
    branches: [ "main" ]
  pull_request:

env:
  DOCKER_REPOSITORY_ACCESS_TOKEN: ${{ secrets.DOCKER_REPOSITORY_ACCESS_TOKEN }}
  DOCKER_REPOSITORY_NAME: ${{ vars.DOCKER_REPOSITORY_NAME }}
  TF_VAR_IMAGE_PULL_SECRET: ${{ secrets.TF_VAR_IMAGE_PULL_SECRET }}
  TF_VAR_CLUSTER_NAME: ${{ vars.TF_VAR_CLUSTER_NAME }}
  CLUSTER_NAME: ${{ vars.CLUSTER_NAME }}
  CLUSTER_ZONE: ${{ vars.CLUSTER_ZONE }}
  PROJECT_NUMBER: ${{ vars.PROJECT_NUMBER }}
  PROJECT_ID: ${{ vars.PROJECT_ID }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}


permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:

    - name: Checkout
      uses: actions/checkout@v3

    - id: 'auth'
      name: 'Obtain access token by using workload identity federation'
      uses: 'google-github-actions/auth@v0'
      with:
        create_credentials_file: true
        token_format: access_token
        workload_identity_provider: projects/${{ env.PROJECT_NUMBER }}/locations/global/workloadIdentityPools/my-pool/providers/my-provider
        service_account: github-actions-workflow@${{ env.PROJECT_ID }}.iam.gserviceaccount.com
    - name: Connect to GKE
      uses: google-github-actions/get-gke-credentials@v0
      with:
        cluster_name: ${{ env.CLUSTER_NAME }}
        location: ${{ env.CLUSTER_ZONE }}


    # - name: Install doctl
    #   uses: digitalocean/action-doctl@v2
    #   with:
    #     token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
  
    # - name: Save DigitalOcean kubeconfig with short-lived credentials
    #   run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ env.CLUSTER_NAME }}


     # Install the latest version of Terraform CLI and configure the Terraform CLI configuration.
    - name: Install Terraform
      run: |
        wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
        echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
        sudo apt update && sudo apt install terraform

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init 

    # Generates an execution plan for Terraform   -input=false
    - name: Terraform Plan
      env:
        TF_VAR_image_pull_secret: ${{ env.TF_VAR_IMAGE_PULL_SECRET }}
        TF_VAR_cluster_name: ${{ env.TF_VAR_CLUSTER_NAME }}
      run: terraform plan

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      env:
        TF_VAR_image_pull_secret: ${{ env.TF_VAR_IMAGE_PULL_SECRET }}
        TF_VAR_cluster_name: ${{ env.TF_VAR_CLUSTER_NAME }}
      run: terraform apply -auto-approve
      